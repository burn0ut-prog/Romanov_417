#include <iostream> // - заголовочный файл для cout, << и много чего ещё
#include <locale.h> // - заголовочный файл для функции setlocale()
#include <iomanip> // - заголовочный файл для функций управления печатью bin(), hex() и др.
#include <bitset>
// ТЕМА 1. ОПЕРАТОРЫ C/C++, СТРОЕНИЕ МИНИМАЛЬНОЙ ПРОГРАММЫ C/C++

// main - во-первых - функция, во-вторых - точка входа
// во всей программе должна быть только одна функция main()
int main() 
{ 
	// блоки кода в функциях, операторах, и просто блоки отдельно взятого кода по C/C++ окружаются фигурными скобками

	/* Классификация операторов
	* 1. Арифмитические (+, -, *, /, % - остаток от целого деления)
	*    а) Логические или Булевы (|| - оператор "или", && - оператор "и", ! - оператор отрицания)
	                              ++ - увеличить на единицу, или "инкремент"
								  -- - уменьшить на единицу, или "декремент"
	*    б) Бинарные (& - бинарное "и", | - бинарное "или", оператор сдвига влево <<, оператор сдвига вправо >>, 
	                  тильда ~ аналог оператора ! для двоичного представления)
	*    в) Операторы сравнения (> - больше, < - меньше, == - равно)
	                            (>= - больше или равно, <= - меньше или равно)
	*
	*/
	setlocale(LC_ALL, "Russian");
	int a = 10;
	int b = 3;
	int result = 10 % 3;
	std::cout
		<< "Лабораторная работа 1. ОПЕРАТОРЫ C / C++, "
		   "СТРОЕНИЕ МИНИМАЛЬНОЙ ПРОГРАММЫ C / C++"
		<< std::endl;
	std::cout << "a = 10, b = 3" << std::endl; // endl - просто перенос на следующую
	std::cout << "10 % 3 = " << 10 % 3 << "\n"; // \n - то же самое, что и std::endl

	std::cout << "\n" << "Таблица значений операции &&" << std::endl;
	std::cout << "\t\tb = true\tb=false" << std::endl;
	std::cout << "a = true" << "\t" << (true && true) << "\t\t" << (true && false) << std::endl;
	std::cout << "a = false" << "\t" << (false && true) << "\t\t" << (false && false) << "\n" << std::endl;

	std::cout << "Таблица значений операции ||" << std::endl;
	std::cout << "\t\tb = true\tb=false" << std::endl;
	std::cout << "a = true" << "\t" << (true || true) << "\t\t" << (true || false) << std::endl;
	std::cout << "a = false" << "\t" << (false || true) << "\t\t" << (false || false) << "\n" << std::endl;


	
	//код для демонстрации оператора отрицания
	bool c = false;
	// !c
	bool d = true;
	// !d
	std::cout << "Демонстрация работы оператора отрицания !" << std::endl;
	std::cout << "c = " << c <<  "\t"  << "!c = " << !c << std::endl;
	std::cout << "d = " << d << "\t" << "!d = " << !d << "\n" << "\n" << "\n" << std::endl;




	int binary_int = 0b1010;
	std::cout << "Бинарное число = binary_int " << std::hex << std::bitset<8>(binary_int) << "\n" << "\n" << "\n" << "\n" << "\n" << std::endl;


	// ДЗ

	int binary_int1 = 0b1010;
	int binary_int2 = 0b1100;
	std::cout << "Таблица бинарных значений операции &" << std::endl;
	std::cout << "Бинарное число = " <<std::bitset<4>(binary_int1) << std::endl;
	std::cout << "Бинарное число = " << std::bitset<4>(binary_int2) << std::endl;
	std::cout << "                 ----"<< std::endl;
	std::cout << "Результат        "  << std::bitset<4>( binary_int1 & binary_int2) << "\n" << std::endl;

	std::cout << "Таблица бинарных значений операции |" << std::endl;
	std::cout << "Бинарное число = " << std::bitset<4>(binary_int1) << std::endl;
	std::cout << "Бинарное число = " << std::bitset<4>(binary_int2) << std::endl;
	std::cout << "                 ----" << std::endl;
	std::cout << "Результат        " << std::bitset<4>(binary_int1 | binary_int2) << "\n" << std::endl;

	std::cout << "Таблица бинарных значений операции ^" << std::endl;
	std::cout << "Бинарное число = " << std::bitset<4>(binary_int1) << std::endl;
	std::cout << "Бинарное число = " << std::bitset<4>(binary_int2) << std::endl;
	std::cout << "                 ----" << std::endl;
	std::cout << "Результат        " << std::bitset<4>(binary_int1 ^ binary_int2) << "\n" << std::endl;

	std::cout << std::endl << "Демонстрация работы побитовых операторов" << std::endl;
	// код для демонстрации операторов >>, << и ~
	std::cout << "a = " << std::bitset<8> (a) << "; b = " << b 
              << "; a >> b = " << std::bitset<8>(a >> b) << std::endl;
	std::cout << "a = " << std::bitset<8> (a) << "; b = " << b 
	          << "; a << b = " << std::bitset<8>(a << b) << std::endl;
	std::cout << "a = " << std::bitset<8>(a) << "; ~a = " << std::bitset<8>(~a) << std::endl;
		      



	// Конец ДЗ



	std::cout << std::endl << "a = " << a << std::endl;
	std::cout << "Оператор ++ после числа: a++ = " << a++ << std::endl;
	std::cout << "После применения инкремента a = " << a << std::endl;

	std::cout << std::endl << "a = " << a << std::endl;
	std::cout << "Оператор ++ перед числом: ++a = " << ++a << std::endl;
	std::cout << "После применения инкремента a = " << a << std::endl;

	/* 
	* если оператор ++ стоит после числа, то число сначала выводится на печать, а затем увеличивается
	* если оператор ++ стоит перед числом, то число сначала увеличивается, а затем выводится
	* если в строчке кода применяется только инкремент (перед или после числа), то разницы нет
	*/


	/* 
	* \t, \n - т.е. escape - последовательности, управляющие символы
	* они кодируют вывод символов, которые нельзя набрать с клавиатуры (непечатные символы)
    * \t - один символ табуляции (при компиляции компилятор заменяет пару символов /t на один символ табуляции
	* \n - один символ переноса строки (при компиляции компилятор заменяет пару символов \n на один символ переноса строки
	* служебным символом для начала escape - последовательности является
	* если нужно употреблять сам по себе слеш '/' беp escape-последовательности
	* то следует в строке о коде писать '\\'
	* обратный слеш / - это просто символ и особого значения не имеет
	*/





	std::system("pause"); // вызов функции system() из стандартной библиотеки
	return 0;
}  